{
    "Unprompted": "Unprompted",
    "Enabled": "Enabled",
    "Unprompted Seed": "Unprompted Seed",
    "Learn More ➜": "Learn More ➜",
    "Functions": "Functions",
    "Shortcodes": "Shortcodes",
    "Select function:": "Select function:",
    "Example Function": "Example Function",
    "txt2img2img": "txt2img2img",
    "Options": "Options",
    "This template demonstrates the structure of a basic Wizard function. You can find this file in your": "This template demonstrates the structure of a basic Wizard function. You can find this file in your",
    "Unprompted/templates/examples": "Unprompted/templates/examples",
    "folder.": "folder.",
    "The content of the": "The content of the",
    "template": "template",
    "block is parsed as": "block is parsed as",
    "Markdown format": "Markdown format",
    ". This means that you can include rich content like links and pictures here. Cool, huh?": ". This means that you can include rich content like links and pictures here. Cool, huh?",
    "The following UI fields are generated automatically by detecting": "The following UI fields are generated automatically by detecting",
    "<set>": "<set>",
    "blocks with the": "blocks with the",
    "_new": "_new",
    "flag.": "flag.",
    "Enter a subject 🡢 subject": "Enter a subject 🡢 subject",
    "Add fluff terms? 🡢 use_fluff": "Add fluff terms? 🡢 use_fluff",
    "Auto-include this in prompt": "Auto-include this in prompt",
    "This template demonstrates the power of the \"after\" block.": "This template demonstrates the power of the \"after\" block.",
    "First, it processes": "First, it processes",
    "Subject A": "Subject A",
    "via txt2img.": "via txt2img.",
    "It then uses the result as the initial image for img2img, setting": "It then uses the result as the initial image for img2img, setting",
    "Subject B": "Subject B",
    "as the prompt.": "as the prompt.",
    "Subject A 🡢 subject_a": "Subject A 🡢 subject_a",
    "Subject B 🡢 subject_b": "Subject B 🡢 subject_b",
    "Generate Shortcode": "Generate Shortcode",
    "Select shortcode:": "Select shortcode:",
    "##: Houses a multiline comment that will not affect the final output.": "##: Houses a multiline comment that will not affect the final output.",
    "Content": "Content",
    "#: Houses a comment that does not affect your final prompt.": "#: Houses a comment that does not affect your final prompt.",
    "Comment 🡢 str": "Comment 🡢 str",
    "after: Processes arbitrary text following the main output.": "after: Processes arbitrary text following the main output.",
    "Order compared to other [after] blocks 🡢 int": "Order compared to other [after] blocks 🡢 int",
    "antonyms: Replaces the content with one or more antonyms.": "antonyms: Replaces the content with one or more antonyms.",
    "array: Manages a group or list of values.": "array: Manages a group or list of values.",
    "Name of array variable 🡢 str": "Name of array variable 🡢 str",
    "Get or set index statements 🡢 verbatim": "Get or set index statements 🡢 verbatim",
    "Custom delimiter string 🡢 _delimiter": "Custom delimiter string 🡢 _delimiter",
    "Shuffle the array 🡢 _shuffle": "Shuffle the array 🡢 _shuffle",
    "Prepend value(s) to the array 🡢 _prepend": "Prepend value(s) to the array 🡢 _prepend",
    "Append value(s) to the array 🡢 _append": "Append value(s) to the array 🡢 _append",
    "Delete value(s) from the array by index 🡢 _del": "Delete value(s) from the array by index 🡢 _del",
    "Removed specified value(s) from the array 🡢 _remove": "Removed specified value(s) from the array 🡢 _remove",
    "Find the first index of the following value(s) 🡢 _find": "Find the first index of the following value(s) 🡢 _find",
    "article: Returns the content with prefixed with a definite or indefinite article.": "article: Returns the content with prefixed with a definite or indefinite article.",
    "autocorrect: Attempts to correct the spelling of content.": "autocorrect: Attempts to correct the spelling of content.",
    "case: Use within [switch] to run different logic blocks depending on the value of a var.": "case: Use within [switch] to run different logic blocks depending on the value of a var.",
    "Matching value 🡢 str": "Matching value 🡢 str",
    "casing: Converts the casing of content.": "casing: Converts the casing of content.",
    "Casing method 🡢 str": "Casing method 🡢 str",
    "camelcase": "camelcase",
    "uppercase": "uppercase",
    "lowercase": "lowercase",
    "pascalcase": "pascalcase",
    "snakecase": "snakecase",
    "constcase": "constcase",
    "kebabcase": "kebabcase",
    "upperkebabcase": "upperkebabcase",
    "separatorcase": "separatorcase",
    "sentencecase": "sentencecase",
    "titlecase": "titlecase",
    "alphanumcase": "alphanumcase",
    "chance: Returns the content if the number you passed is greater than or equal to a random number between 1 and 100.": "chance: Returns the content if the number you passed is greater than or equal to a random number between 1 and 100.",
    "Highest possible roll 🡢 _sides": "Highest possible roll 🡢 _sides",
    "choose: Returns one of multiple options, delimited by newline or vertical pipe": "choose: Returns one of multiple options, delimited by newline or vertical pipe",
    "Number of times to choose 🡢 int": "Number of times to choose 🡢 int",
    "String delimiter when returning more than one choice 🡢 _sep": "String delimiter when returning more than one choice 🡢 _sep",
    "Custom weight per option 🡢 _weighted": "Custom weight per option 🡢 _weighted",
    "Override random nature of shortcode with predetermined outcome 🡢 _case": "Override random nature of shortcode with predetermined outcome 🡢 _case",
    "config: Updates your settings with the content for the duration of a run.": "config: Updates your settings with the content for the duration of a run.",
    "conjugate: Converts the content verb into another conjugated form.": "conjugate: Converts the content verb into another conjugated form.",
    "do: It's a do-until loop.": "do: It's a do-until loop.",
    "Until condition 🡢 until": "Until condition 🡢 until",
    "elif: Shorthand 'else-if.'": "elif: Shorthand 'else-if.'",
    "else: Returns content if a previous conditional shortcode failed its check, otherwise discards content.": "else: Returns content if a previous conditional shortcode failed its check, otherwise discards content.",
    "eval: Parses the content using the simpleeval library, returning the result. Particularly useful for arithmetic.": "eval: Parses the content using the simpleeval library, returning the result. Particularly useful for arithmetic.",
    "file: Processes the file content of 'path.'": "file: Processes the file content of 'path.'",
    "Filepath 🡢 str": "Filepath 🡢 str",
    "Expected encoding 🡢 _encoding": "Expected encoding 🡢 _encoding",
    "filelist: Returns a list of files at a given location using glob.": "filelist: Returns a list of files at a given location using glob.",
    "Result delimiter 🡢 _delimiter": "Result delimiter 🡢 _delimiter",
    "for: It's a for loop.": "for: It's a for loop.",
    "Set a variable 🡢 my_var": "Set a variable 🡢 my_var",
    "Conditional check 🡢 str": "Conditional check 🡢 str",
    "Operation to perform at the end step 🡢 str": "Operation to perform at the end step 🡢 str",
    "get: Returns the value of a variable.": "get: Returns the value of a variable.",
    "Variable to get 🡢 str": "Variable to get 🡢 str",
    "Default value if the variable doesn't exist 🡢 _default": "Default value if the variable doesn't exist 🡢 _default",
    "Separator string when returning multiple variables 🡢 _sep": "Separator string when returning multiple variables 🡢 _sep",
    "String to prepend to the variable 🡢 _before": "String to prepend to the variable 🡢 _before",
    "String to append to the variable 🡢 _after": "String to append to the variable 🡢 _after",
    "hypernyms: Replaces the content with one or more hypernyms.": "hypernyms: Replaces the content with one or more hypernyms.",
    "hyponyms: Replaces the content with one or more synonyms.": "hyponyms: Replaces the content with one or more synonyms.",
    "if: Checks whether a variable is equal to a given value.": "if: Checks whether a variable is equal to a given value.",
    "Conditional statement 🡢 my_var": "Conditional statement 🡢 my_var",
    "Evaluation method 🡢 _is": "Evaluation method 🡢 _is",
    "==": "==",
    "!=": "!=",
    "<": "<",
    "<=": "<=",
    ">": ">",
    ">=": ">=",
    "Invert evaluation such that a true statement will return false 🡢 _not": "Invert evaluation such that a true statement will return false 🡢 _not",
    "Return true if any one of multiple conditions are true 🡢 _any": "Return true if any one of multiple conditions are true 🡢 _any",
    "info: Returns various types of metadata about the content.": "info: Returns various types of metadata about the content.",
    "Return the character count 🡢 character_count": "Return the character count 🡢 character_count",
    "Return the word count 🡢 word_count": "Return the word count 🡢 word_count",
    "Return the CLIP token count (prompt complexity) 🡢 clip_count": "Return the CLIP token count (prompt complexity) 🡢 clip_count",
    "Return the count of a custom substring 🡢 string_count": "Return the count of a custom substring 🡢 string_count",
    "length: Returns the number of items in a delimited string.": "length: Returns the number of items in a delimited string.",
    "The string to evaluate 🡢 str": "The string to evaluate 🡢 str",
    "Delimiter to check for 🡢 _delimiter": "Delimiter to check for 🡢 _delimiter",
    "Maximum number to be returned 🡢 _max": "Maximum number to be returned 🡢 _max",
    "max: Returns the maximum value among the given arguments.": "max: Returns the maximum value among the given arguments.",
    "min: Returns the minimum value among the given arguments.": "min: Returns the minimum value among the given arguments.",
    "override: Force variable(s) to hold a pre-determined value the rest of the run.": "override: Force variable(s) to hold a pre-determined value the rest of the run.",
    "Arguments in variable=value format 🡢 verbatim": "Arguments in variable=value format 🡢 verbatim",
    "pluralize: Converts the content into plural form.": "pluralize: Converts the content into plural form.",
    "random: Returns a random number between 0 and a given max value (inclusive)": "random: Returns a random number between 0 and a given max value (inclusive)",
    "Minimum number 🡢 _min": "Minimum number 🡢 _min",
    "Maximum number 🡢 _max": "Maximum number 🡢 _max",
    "Evaluate as floats instead of integers 🡢 _float": "Evaluate as floats instead of integers 🡢 _float",
    "repeat: Returns the content an arbitrary number of times.": "repeat: Returns the content an arbitrary number of times.",
    "Number of times to repeat the content 🡢 int": "Number of times to repeat the content 🡢 int",
    "Delimiter string between outputs 🡢 _sep": "Delimiter string between outputs 🡢 _sep",
    "replace: Updates a string using the arguments for replacement logic.": "replace: Updates a string using the arguments for replacement logic.",
    "Arbitrary replacement arguments in old=new format 🡢 verbatim": "Arbitrary replacement arguments in old=new format 🡢 verbatim",
    "Original value, with advanced expression support 🡢 _from": "Original value, with advanced expression support 🡢 _from",
    "New value, with advanced expression support 🡢 _to": "New value, with advanced expression support 🡢 _to",
    "Maximum number of times the replacement may occur 🡢 _count": "Maximum number of times the replacement may occur 🡢 _count",
    "set: Stores a value into a given variable.": "set: Stores a value into a given variable.",
    "Variable name 🡢 verbatim": "Variable name 🡢 verbatim",
    "Only set this variable if it doesn't already exist 🡢 _new": "Only set this variable if it doesn't already exist 🡢 _new",
    "Array of valid values (used in conjunction with _new) 🡢 _choices": "Array of valid values (used in conjunction with _new) 🡢 _choices",
    "Append the content to the variable's current value 🡢 _append": "Append the content to the variable's current value 🡢 _append",
    "Prepend the content to the variable's current value 🡢 _prepend": "Prepend the content to the variable's current value 🡢 _prepend",
    "Print the variable's value 🡢 _out": "Print the variable's value 🡢 _out",
    "sets: The atomic version of [set] that lets you set multiple variables at once.": "sets: The atomic version of [set] that lets you set multiple variables at once.",
    "Arbitrary arguments in variable=value format 🡢 verbatim": "Arbitrary arguments in variable=value format 🡢 verbatim",
    "singularize: Converts the content into singular form.": "singularize: Converts the content into singular form.",
    "substring: Slices up the content.": "substring: Slices up the content.",
    "Beginning index of the substring 🡢 start": "Beginning index of the substring 🡢 start",
    "Ending index of the substring 🡢 end": "Ending index of the substring 🡢 end",
    "Step size 🡢 step": "Step size 🡢 step",
    "Unit type 🡢 unit": "Unit type 🡢 unit",
    "characters": "characters",
    "words": "words",
    "switch: Use in conjunction with [case] to run different logic blocks depending on the value of a var.": "switch: Use in conjunction with [case] to run different logic blocks depending on the value of a var.",
    "Variable to test against 🡢 verbatim": "Variable to test against 🡢 verbatim",
    "synonyms: Replaces the content with one or more synonyms.": "synonyms: Replaces the content with one or more synonyms.",
    "template: This is used by the Wizard to instantiate a custom template UI. It is bypassed by the normal shortcode parser.": "template: This is used by the Wizard to instantiate a custom template UI. It is bypassed by the normal shortcode parser.",
    "unset: Removes one or more variables from memory. Generally not needed.": "unset: Removes one or more variables from memory. Generally not needed.",
    "Arbitrary variable names to free from memory 🡢 verbatim": "Arbitrary variable names to free from memory 🡢 verbatim",
    "while: Loops content until the condition returns false.": "while: Loops content until the condition returns false.",
    "Arbitrary conditional statement(s) to test against 🡢 verbatim": "Arbitrary conditional statement(s) to test against 🡢 verbatim",
    "Invert evaluation such that a false condition will end the loop 🡢 _not": "Invert evaluation such that a false condition will end the loop 🡢 _not",
    "controlnet: A neural network structure to control diffusion models by adding extra conditions. Check manual for setup info.": "controlnet: A neural network structure to control diffusion models by adding extra conditions. Check manual for setup info.",
    "Model name (do not include extension) 🡢 model": "Model name (do not include extension) 🡢 model",
    "Resolution of the detection map 🡢 detect_resolution": "Resolution of the detection map 🡢 detect_resolution",
    "Use low VRAM mode? 🡢 save_memory": "Use low VRAM mode? 🡢 save_memory",
    "DDIM ETA 🡢 eta": "DDIM ETA 🡢 eta",
    "Value Threshold 🡢 value_threhsold": "Value Threshold 🡢 value_threhsold",
    "Distance Threshold 🡢 distance_threhsold": "Distance Threshold 🡢 distance_threhsold",
    "Background Threshold 🡢 bg_threhsold": "Background Threshold 🡢 bg_threhsold",
    "Canny low threshold 🡢 low_threshold": "Canny low threshold 🡢 low_threshold",
    "Canny high threshold 🡢 high_threshold": "Canny high threshold 🡢 high_threshold",
    "Render hands with Openpose? 🡢 openpose_hands": "Render hands with Openpose? 🡢 openpose_hands",
    "enable_multi_images: Allows to use multiple init_images or multiple masks": "enable_multi_images: Allows to use multiple init_images or multiple masks",
    "file2mask: Modify or replace your img2img mask with arbitrary files.": "file2mask: Modify or replace your img2img mask with arbitrary files.",
    "Path to image file 🡢 str": "Path to image file 🡢 str",
    "Mask blend mode 🡢 mode": "Mask blend mode 🡢 mode",
    "add": "add",
    "subtract": "subtract",
    "discard": "discard",
    "Show mask in output 🡢 show": "Show mask in output 🡢 show",
    "img2img: Runs an img2img task inside of an [after] block.": "img2img: Runs an img2img task inside of an [after] block.",
    "img2img_autosize: Automatically adjusts the width and height parameters in img2img mode based on the proportions of the input image.": "img2img_autosize: Automatically adjusts the width and height parameters in img2img mode based on the proportions of the input image.",
    "Minimum pixels of at least one dimension 🡢 target": "Minimum pixels of at least one dimension 🡢 target",
    "Only run this shortcode if using full resolution inpainting mode 🡢 only_full_res": "Only run this shortcode if using full resolution inpainting mode 🡢 only_full_res",
    "img2pez: Optimize a hard prompt using the PEZ algorithm and CLIP encoders, AKA Hard Prompts Made Easy.": "img2pez: Optimize a hard prompt using the PEZ algorithm and CLIP encoders, AKA Hard Prompts Made Easy.",
    "Image path 🡢 image_path": "Image path 🡢 image_path",
    "Prompt length 🡢 prompt_length": "Prompt length 🡢 prompt_length",
    "Iterations 🡢 iterations": "Iterations 🡢 iterations",
    "Learning rate 🡢 learning_rate": "Learning rate 🡢 learning_rate",
    "Weight decay 🡢 weight_decay": "Weight decay 🡢 weight_decay",
    "Prompt bs (well, that's what they call it) 🡢 prompt_bs": "Prompt bs (well, that's what they call it) 🡢 prompt_bs",
    "CLIP model 🡢 clip_model": "CLIP model 🡢 clip_model",
    "ViT-L-14": "ViT-L-14",
    "ViT-H-14": "ViT-H-14",
    "CLIP pretrain 🡢 clip_pretrain": "CLIP pretrain 🡢 clip_pretrain",
    "openai": "openai",
    "laion2b_s32b_b79k": "laion2b_s32b_b79k",
    "Try freeing CLIP model from memory? 🡢 free_memory": "Try freeing CLIP model from memory? 🡢 free_memory",
    "init_image: Loads an image from the given path and sets it as the initial image for use with img2img.": "init_image: Loads an image from the given path and sets it as the initial image for use with img2img.",
    "Image path": "Image path",
    "instance2mask: Creates an image mask from instances of types specified by the content for use with inpainting.": "instance2mask: Creates an image mask from instances of types specified by the content for use with inpainting.",
    "refine": "refine",
    "Run inpaint per instance found 🡢 per_instance": "Run inpaint per instance found 🡢 per_instance",
    "Precision of selected area 🡢 mask_precision": "Precision of selected area 🡢 mask_precision",
    "Padding radius in pixels 🡢 padding": "Padding radius in pixels 🡢 padding",
    "Smoothing radius in pixels 🡢 smoothing": "Smoothing radius in pixels 🡢 smoothing",
    "Precision of instance selection 🡢 instance_precision": "Precision of instance selection 🡢 instance_precision",
    "Number of instance to select 🡢 select": "Number of instance to select 🡢 select",
    "Instance selection mode 🡢 select_mode": "Instance selection mode 🡢 select_mode",
    "overlap": "overlap",
    "relative overlap": "relative overlap",
    "greatest area": "greatest area",
    "invert_mask: Inverts the mask (great in combination with multiple txt2masks)": "invert_mask: Inverts the mask (great in combination with multiple txt2masks)",
    "pix2pix_zero: A diffusion-based image-to-image approach that allows users to specify the edit direction on-the-fly.": "pix2pix_zero: A diffusion-based image-to-image approach that allows users to specify the edit direction on-the-fly.",
    "txt2mask: Creates an image mask from the content for use with inpainting.": "txt2mask: Creates an image mask from the content for use with inpainting.",
    "Use legacy weights 🡢 legacy_weights": "Use legacy weights 🡢 legacy_weights",
    "Precision of selected area 🡢 precision": "Precision of selected area 🡢 precision",
    "Negative mask prompt 🡢 negative_mask": "Negative mask prompt 🡢 negative_mask",
    "Negative mask precision of selected area 🡢 neg_precision": "Negative mask precision of selected area 🡢 neg_precision",
    "Negative mask padding radius in pixels 🡢 neg_padding": "Negative mask padding radius in pixels 🡢 neg_padding",
    "Negative mask smoothing radius in pixels 🡢 neg_smoothing": "Negative mask smoothing radius in pixels 🡢 neg_smoothing",
    "Mask color, enables Inpaint Sketch mode 🡢 sketch_color": "Mask color, enables Inpaint Sketch mode 🡢 sketch_color",
    "Mask alpha, must be used in conjunction with mask color 🡢 sketch_alpha": "Mask alpha, must be used in conjunction with mask color 🡢 sketch_alpha",
    "Save the mask size to the following variable 🡢 size_var": "Save the mask size to the following variable 🡢 size_var",
    "Process Text": "Process Text",

    "Re-process extra networks after Unprompted is finished (WIP - this is not yet functional!)": "Re-process extra networks after Unprompted is finished (WIP - this is not yet functional!)",
    "unprompted": "unprompted",
    "Photo of a cat": "Photo of a cat",
    "Walter White": "Walter White",
    "my_array": "my_array",
    "my_var < 10": "my_var < 10",
    "my_var + 1": "my_var + 1",
    "my_var=6 another_var=\"300\"": "my_var=6 another_var=\"300\"",
    "hello=\"goodbye\" red=\"blue\"": "hello=\"goodbye\" red=\"blue\"",
    "my_var=\"something\" another_var=56": "my_var=\"something\" another_var=56",
    "my_var another_var": "my_var another_var",
    "Leave blank to use the initial img2img image. Supports multiple paths.": "Leave blank to use the initial img2img image. Supports multiple paths.",
    "e.g. tan or 127,127,127": "e.g. tan or 127,127,127",
    "Test prompt": "Test prompt"
}